# 全局配置
user nginx;                     # 以非root用户运行
worker_processes auto;          # 自动分配worker进程数（通常为CPU核心数）
error_log logs/error.log error; # 只记录严重错误，减少磁盘IO和日志文件大小
pid /var/run/nginx.pid;         # PID文件路径

events {
    worker_connections 1024;    # 单个worker进程最大连接数
    multi_accept on;            # 一次性接受所有新连接
    use epoll;                     # 使用高效的事件驱动模型（Linux）
}

http {
   
    server_tokens off;          # 隐藏NGINX版本信息

    # 日志格式定义
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    '$request_time $upstream_response_time';  # 包含请求处理时间和上游响应时间
    
    # 全局访问日志配置
    # 注意: Nginx不支持直接使用日期变量进行日志分割
    # 建议使用 logrotate 或 cron 任务配合信号控制实现日志轮换
    access_log logs/access.log main;

    include mime.types;                    # 包含MIME类型定义文件
    default_type application/octet-stream; # 默认响应类型

    # I/O优化 - 减少带宽消耗和提高传输效率
    sendfile on;                # 开启零拷贝文件传输，减少CPU消耗和内核上下文切换
    tcp_nopush on;              # 优化数据包传输，减少网络报文数量，配合sendfile使用
    tcp_nodelay on;             # 禁用Nagle算法，降低小数据包传输延迟

    # 连接优化 - 减少TCP连接建立的开销
    keepalive_timeout 65;       # 保持客户端连接超时时间(秒)，减少重复的TCP握手
    keepalive_requests 100;     # 在一个keepalive连接上可处理的最大请求数

    # 缓存优化 - 减少重复读取文件的开销
    open_file_cache max=10000 inactive=20s;  # 缓存最多10000个文件描述符，20秒不使用则关闭
    open_file_cache_valid 30s;               # 每30秒检查一次缓存中的文件描述符是否仍然有效
    open_file_cache_min_uses 2;              # 文件被访问至少2次后才会被缓存，降低低频访问文件的缓存
    open_file_cache_errors on;               # 同时缓存文件错误信息，避免重复访问不存在的文件

    # Gzip压缩配置 - 显著减少传输数据量，节省带宽
    gzip on;                    # 启用gzip压缩，可减少传输数据量40%-70%
    gzip_comp_level 6;          # 压缩级别(1-9)，一般来说推荐你设置成 6 就比较合适
    gzip_min_length 256;        # 最小压缩文件大小(字节)，小于此值的文件不压缩
    gzip_buffers 16 8k;         # 压缩缓冲区大小，16个8k的缓冲区
    gzip_proxied any;           # 对所有代理请求进行压缩，包括反向代理的响应
    gzip_vary on;               # 添加Vary: Accept-Encoding响应头，正确处理缓存
    gzip_http_version 1.1;      # 使用HTTP 1.1版本，支持gzip压缩
    gzip_types 
        text/plain              # 压缩纯文本
        text/css                # 压缩CSS
        text/xml                # 压缩XML
        text/javascript         # 压缩JS
        application/javascript  # 压缩JS
        application/json        # 压缩JSON
        application/xml         # 压缩XML
        application/xml+rss     # 压缩RSS
        image/svg+xml           # 压缩SVG图片
        image/png               # 压缩PNG图片
        font/eot               # 压缩EOT字体
        font/otf               # 压缩OTF字体
        font/ttf               # 压缩TTF字体
        application/octet-stream;  # 压缩二进制文件流
    gzip_disable "MSIE [1-6]\."; # 对IE6及以下浏览器禁用gzip，避免兼容性问题
    gzip_static on;             # 优先使用预压缩.gz文件，减少CPU使用率

    # SSL/TLS通用配置（可独立为单独文件并通过include引入）
    ssl_protocols TLSv1.2 TLSv1.3;               # 仅允许安全协议
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;  # 指定加密算法优先级
    ssl_prefer_server_ciphers on;                # 优先使用服务端加密套件
    ssl_session_cache shared:SSL:10m;            # 会话缓存
    ssl_session_timeout 10m;                     # 会话超时时间
    ssl_stapling on;                             # OCSP装订
    ssl_stapling_verify on;                      # 验证OCSP响应

    # 通用安全头（可独立为单独文件并通过include引入）
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;  # HTTP严格传输安全
    add_header X-Frame-Options "SAMEORIGIN" always;  # 防止网站被嵌入框架
    add_header X-Content-Type-Options "nosniff" always;  # 防止MIME类型嗅探
    add_header X-XSS-Protection "1; mode=block" always;  # 启用XSS过滤
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:;" always;  # 内容安全策略
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;  # 控制HTTP Referer头信息

    # 反向代理通用配置（可独立为单独文件）
    proxy_http_version 1.1;  # 使用HTTP 1.1版本进行代理
    proxy_set_header Host $host;  # 传递原始主机名
    proxy_set_header X-Real-IP $remote_addr;  # 传递客户端真实IP
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # 传递请求链上的所有IP
    proxy_set_header X-Forwarded-Proto $scheme;  # 传递原始协议类型
    proxy_set_header Upgrade $http_upgrade;      # WebSocket支持
    proxy_set_header Connection "upgrade";  # 连接升级支持

    # 代理缓存 - 减少对后端服务的请求
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=STATIC:10m inactive=24h max_size=1g;  # 设置缓存路径和参数
    

    # HTTP到HTTPS重定向
    server {
        listen 80;  # 监听80端口
        server_name example.com;  # 服务器域名
        return 301 https://$host$request_uri;    # 强制跳转HTTPS
    }

    # 主HTTPS服务配置
    server {
        listen 443 ssl;  # 监听443端口，启用SSL
        http2 on;         # 新版 HTTP/2 启用指令
        server_name example.com;  # 服务器域名

        # SSL证书路径
        ssl_certificate /etc/nginx/ssl/example.com.crt;  # SSL证书文件路径
        ssl_certificate_key /etc/nginx/ssl/example.com.key;  # SSL私钥文件路径

        # 添加SSL会话缓存配置
        ssl_session_cache shared:SSL:10m;  # 分配10MB共享内存空间
        ssl_session_timeout 10m;           # 会话键超时时间为10分钟

        # 静态资源服务
        root /var/www/html;  # 网站根目录
        index index.html;  # 默认索引页

        # 静态资源缓存配置
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {  # 匹配静态资源文件扩展名
            expires 30d;                        # 客户端缓存30天
            add_header Cache-Control "public";  # 允许所有缓存服务器缓存
            access_log off;                     # 减少日志噪音
        }

        # API反向代理
        location /api/ {  # 匹配API路径
            proxy_pass http://backend_servers;   # 后端服务器组
            proxy_cache STATIC;                  # 启用缓存
            proxy_cache_valid 200 302 10m;       # 缓存有效期
            proxy_cache_use_stale error timeout; # 容错机制
            proxy_connect_timeout 5s;            # 连接超时
            proxy_read_timeout 15s;  # 读取超时
        }

        # WebSocket代理示例
        location /ws/ {  # 匹配WebSocket路径
            proxy_pass http://websocket_servers;  # WebSocket服务器组
            proxy_read_timeout 300s;             # 长连接超时
        }

        # 敏感路径访问控制
        location /admin/ {  # 匹配管理员路径
            allow 192.168.1.0/24;                # IP白名单
            deny all;                            # 拒绝所有其他IP
            auth_basic "Admin Area";             # 基础认证
            auth_basic_user_file /etc/nginx/.htpasswd;  # 认证用户文件
        }

        # 错误页面
        error_page 404 /404.html;  # 自定义404错误页面
        error_page 500 502 503 504 /50x.html;  # 自定义50x错误页面
    }

    # 后端服务器组（负载均衡）
    upstream backend_servers {
        least_conn;                             # 最小连接数策略
        server 192.168.1.101:8080 weight=3;     # 权重分配
        server 192.168.1.102:8080;  # 默认权重为1
        server 192.168.1.103:8080 backup;       # 备用服务器
        keepalive 32;                           # 保持长连接
    }

    # WebSocket服务器组
    upstream websocket_servers {
        ip_hash;                    # 会话保持
        server 192.168.1.104:8000;  # WebSocket服务器1
        server 192.168.1.105:8000;  # WebSocket服务器2
    }
}